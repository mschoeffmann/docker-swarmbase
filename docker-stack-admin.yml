version: "3.8"

services:
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
    networks:
      - metrics
      - proxy
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    user: root:root
    deploy:
      mode: global
      placement:
        constraints: 
          - node.platform.os == linux
          - node.role == manager

  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana/
      - ./grafana/:/etc/grafana/provisioning/
    secrets:
      - admin-password
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/admin-password
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/home.json
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - metrics
      - proxy
    user: "472"
    deploy:
      mode: global
      placement:
        constraints: 
          - node.platform.os == linux
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.admin-grafana.rule=Host(`grafana.${ADMIN_HOSTNAME}`)"
        - "traefik.http.routers.admin-grafana.entrypoints=admin"
        - "traefik.http.routers.admin-grafana.tls=true"
        - "traefik.http.routers.admin-grafana.tls.certresolver=leresolver"
        - "traefik.http.services.admin-grafana.loadbalancer.server.port=3000"
        - "traefik.docker.network=proxy"

  node-exporter:
    image: prom/node-exporter:latest 
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    networks:
      - metrics
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      placement:
        constraints: 
          - node.platform.os == linux
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - "prometheus-job=node-exporter"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - metrics
    command:
      - '--housekeeping_interval=5s'
      - '--docker_only'
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - "prometheus-job=cadvisor"

  portainer:
    image: portainer/portainer-ce:latest
    command: -H tcp://tasks.agent:9001 --tlsskipverify --admin-password-file /run/secrets/admin-password --templates "https://localhost/no-template-file.json"
    secrets:
      - admin-password
    volumes:
      - portainer-data:/data
    networks:
      - agent
      - proxy
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.admin-portainer.rule=Host(`portainer.${ADMIN_HOSTNAME}`)"
        - "traefik.http.routers.admin-portainer.entrypoints=admin"
        - "traefik.http.routers.admin-portainer.tls=true"
        - "traefik.http.routers.admin-portainer.tls.certresolver=leresolver"
        - "traefik.http.services.admin-portainer.loadbalancer.server.port=9000"
        - "traefik.docker.network=proxy"

  agent:
    image: portainer/agent:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux

secrets:
  admin-password:
    file: ./.admin-password

volumes:
  grafana-data:
  prometheus-data:
  portainer-data:

networks:
  agent:
    driver: overlay
    attachable: true
  metrics:
    external: true
  proxy:
    external: true
